/**
 * CHANGELOG
 *
 * Instru√ß√µes para Revisores:
 * Este bloco de coment√°rios registra as modifica√ß√µes significativas do arquivo.
 * Cada nova modifica√ß√£o deve ser adicionada no topo da lista.
 * Use o formato "Vers√£o [n√∫mero]: [Descri√ß√£o da modifica√ß√£o]".
 * Mantenha a lista limitada √†s 4 √∫ltimas altera√ß√µes para clareza e concis√£o.
 *
 * Vers√£o 2.4: Implementa√ß√£o de exporta√ß√£o dupla - CSV otimizado para Excel brasileiro (separador ponto-v√≠rgula, formato de data dd/mm/yyyy) e planilha Excel nativa (.xlsx) com formata√ß√£o rica usando SheetJS, incluindo cabe√ßalhos destacados, filtros autom√°ticos, larguras otimizadas e links clic√°veis.
 * Vers√£o 2.3: Implementa√ß√£o completa do sistema de sele√ß√£o m√∫ltipla com checkbox "selecionar todas", exclus√£o em massa com confirma√ß√£o de senha, reorganiza√ß√£o das colunas (autor, link da foto, datas, a√ß√µes), remo√ß√£o da coluna ID e adi√ß√£o da funcionalidade de exporta√ß√£o CSV com todos os dados das postagens.
 * Vers√£o 2.2: Simplifica√ß√£o da interface de confirma√ß√£o de senha usando popup nativo (prompt) ao inv√©s de modal customizado. Interface mais minimalista e direta.
 * Vers√£o 2.1: Limpeza de logs sens√≠veis √† seguran√ßa, mantendo apenas logs essenciais de controle.
 */
document.addEventListener('DOMContentLoaded', () => {
    console.log('DOM completamente carregado e analisado. Iniciando a l√≥gica do script do painel de administra√ß√£o.');

    const API_URL = 'https://mural-de-postagens.vercel.app';
    const obfuscatedKey1 = 'OGMyMjNmZjljM2MyNjc4MzJjMjZhYWNiMjEwMTQ2MDI=';
    const obfuscatedKey2 = 'ZWNjMjlhYjNhNDZmOGZhODc2MWViZGVlOGExZTg1MGQ=';
    const obfuscatedAdminPassword = 'JFkpJF0lJF0pJFkpJFopJFkpJF4lJFopJF8lJFslJE0=';

    function getSecureValue(obfuscated) {
        return atob(obfuscated);
    }
    
    function getAdminPassword() {
        // Senha de administrador para opera√ß√µes privilegiadas
        return 'muralunlock';
    }

    const IMG_API_CONFIGS = [
        { name: 'ImgBB - eduk', endpoint: 'https://api.imgbb.com/1/upload', key: getSecureValue(obfuscatedKey1) },
        { name: 'ImgBB - enova', endpoint: 'https://api.imgbb.com/1/upload', key: getSecureValue(obfuscatedKey2) }
    ];

    // Seletores dos elementos do DOM
    const loginModal = document.getElementById('login-modal');
    const passwordInput = document.getElementById('password-input');
    const loginBtn = document.getElementById('login-btn');
    const adminPage = document.getElementById('admin-page');
    const logoutBtn = document.getElementById('logout-btn');
    const postsTableBody = document.getElementById('posts-table-body');
    const editPostModal = document.getElementById('edit-post-modal');
    const closeEditModalBtn = document.getElementById('close-edit-modal');
    const editPostForm = document.getElementById('edit-post-form');

    // Novos elementos para funcionalidades adicionais
    const selectAllCheckbox = document.getElementById('select-all-checkbox');
    const bulkDeleteBtn = document.getElementById('bulk-delete-btn');
    const exportCsvBtn = document.getElementById('export-csv-btn');
    const exportExcelBtn = document.getElementById('export-excel-btn');
    const selectedCountSpan = document.querySelector('.selected-count');

    const postsPerPage = 20;
    let currentPage = 1;
    let allPosts = []; // Array para armazenar todas as postagens para exporta√ß√£o

    // ========== FUN√á√ÉO MINIMALISTA DE CONFIRMA√á√ÉO ==========
    function showPasswordConfirm() {
        return new Promise((resolve, reject) => {
            const enteredPassword = prompt('üîí Digite a senha de administrador para confirmar:');
            
            if (enteredPassword === null) {
                // Usu√°rio cancelou
                reject(new Error('Opera√ß√£o cancelada pelo usu√°rio'));
                return;
            }
            
            const correctPassword = getAdminPassword();
            
            if (enteredPassword === correctPassword) {
                console.log('‚úÖ Acesso admin confirmado');
                resolve(correctPassword);
            } else {
                console.log('‚ùå Tentativa de acesso com senha incorreta');
                alert('‚ùå Senha incorreta!');
                reject(new Error('Senha incorreta'));
            }
        });
    }
    // ========================================================

    // ========== FUN√á√ïES DE SELE√á√ÉO M√öLTIPLA ==========
    function updateBulkDeleteButton() {
        const selectedCheckboxes = document.querySelectorAll('.post-checkbox:checked');
        const count = selectedCheckboxes.length;
        
        selectedCountSpan.textContent = count;
        
        if (count > 0) {
            bulkDeleteBtn.style.display = 'block';
        } else {
            bulkDeleteBtn.style.display = 'none';
        }
    }

    function handleSelectAll() {
        const isChecked = selectAllCheckbox.checked;
        const postCheckboxes = document.querySelectorAll('.post-checkbox');
        
        postCheckboxes.forEach(checkbox => {
            checkbox.checked = isChecked;
        });
        
        updateBulkDeleteButton();
    }

    function handleIndividualCheckbox() {
        const postCheckboxes = document.querySelectorAll('.post-checkbox');
        const checkedCheckboxes = document.querySelectorAll('.post-checkbox:checked');
        
        // Atualizar o estado do checkbox "selecionar todas"
        if (checkedCheckboxes.length === 0) {
            selectAllCheckbox.indeterminate = false;
            selectAllCheckbox.checked = false;
        } else if (checkedCheckboxes.length === postCheckboxes.length) {
            selectAllCheckbox.indeterminate = false;
            selectAllCheckbox.checked = true;
        } else {
            selectAllCheckbox.indeterminate = true;
        }
        
        updateBulkDeleteButton();
    }

    // Event listeners para sele√ß√£o m√∫ltipla
    if (selectAllCheckbox) {
        selectAllCheckbox.addEventListener('change', handleSelectAll);
    }

    if (bulkDeleteBtn) {
        bulkDeleteBtn.addEventListener('click', handleBulkDelete);
    }
    // ================================================

    // ========== FUN√á√ïES DE EXCLUS√ÉO EM MASSA ==========
    async function handleBulkDelete() {
        const selectedCheckboxes = document.querySelectorAll('.post-checkbox:checked');
        const selectedIds = Array.from(selectedCheckboxes).map(cb => cb.value);
        
        if (selectedIds.length === 0) {
            alert('Nenhuma postagem selecionada.');
            return;
        }
        
        const confirmMessage = `Tem certeza que deseja excluir ${selectedIds.length} postagem(ns) selecionada(s)?`;
        if (!confirm(confirmMessage)) {
            return;
        }

        try {
            // Solicitar confirma√ß√£o de senha
            const adminPassword = await showPasswordConfirm();
            
            // Executar exclus√µes
            let successCount = 0;
            let errorCount = 0;
            
            for (const postId of selectedIds) {
                try {
                    const response = await fetch(`${API_URL}/api/posts?id=${postId}&admin_password=${encodeURIComponent(adminPassword)}`, {
                        method: 'DELETE'
                    });

                    if (response.ok) {
                        successCount++;
                    } else {
                        errorCount++;
                    }
                } catch (error) {
                    console.error(`Erro ao excluir postagem ${postId}:`, error);
                    errorCount++;
                }
            }
            
            // Mostrar resultado
            if (errorCount === 0) {
                alert(`‚úÖ ${successCount} postagem(ns) exclu√≠da(s) com sucesso!`);
            } else {
                alert(`‚ö†Ô∏è ${successCount} postagem(ns) exclu√≠da(s), ${errorCount} falha(s).`);
            }
            
            // Recarregar lista
            fetchPosts();
            
        } catch (error) {
            if (error.message !== 'Opera√ß√£o cancelada pelo usu√°rio') {
                console.error('Erro na exclus√£o em massa:', error);
                alert(error.message);
            }
        }
    }
    // =================================================

    // ========== FUN√á√ïES DE EXPORTA√á√ÉO ==========
    
    // Fun√ß√£o para formatar data no padr√£o brasileiro para export
    function formatDateForExport(dateString) {
        if (!dateString) return '';
        const date = new Date(dateString);
        const day = date.getDate().toString().padStart(2, '0');
        const month = (date.getMonth() + 1).toString().padStart(2, '0');
        const year = date.getFullYear();
        return `${day}/${month}/${year}`;
    }

    // Fun√ß√£o para escapar e limpar dados para export
    function cleanDataForExport(data) {
        if (!data) return '';
        return String(data)
            .replace(/[\r\n]+/g, ' ') // Remover quebras de linha
            .replace(/\s+/g, ' ') // Normalizar espa√ßos
            .trim();
    }

    // CSV otimizado para Excel brasileiro
    async function exportToCSV() {
        try {
            // Buscar todas as postagens
            const response = await fetch(`${API_URL}/api/posts?limit=1000`);
            if (!response.ok) {
                throw new Error('Erro ao buscar postagens para exporta√ß√£o');
            }
            
            const data = await response.json();
            const posts = data.posts;
            
            if (posts.length === 0) {
                alert('N√£o h√° postagens para exportar.');
                return;
            }
            
            // Cabe√ßalhos em portugu√™s
            const headers = [
                'ID',
                'T√≠tulo',
                'Descri√ß√£o',
                'Autor',
                'Data da Foto',
                'Data da Postagem',
                'Tags',
                'URL da Imagem',
                'Cor'
            ];
            
            // Fun√ß√£o para escapar campos CSV (padr√£o brasileiro)
            function escapeCSVField(field) {
                if (field === null || field === undefined) return '';
                const str = String(field);
                // Para CSV brasileiro, usar aspas duplas para campos com ponto-v√≠rgula
                if (str.includes('"') || str.includes(';') || str.includes('\n')) {
                    return '"' + str.replace(/"/g, '""') + '"';
                }
                return str;
            }
            
            // Criar CSV com separador brasileiro
            const csvRows = [headers.join(';')]; // Ponto-v√≠rgula para padr√£o brasileiro
            
            posts.forEach(post => {
                const row = [
                    escapeCSVField(post.id),
                    escapeCSVField(cleanDataForExport(post.title)),
                    escapeCSVField(cleanDataForExport(post.description)),
                    escapeCSVField(cleanDataForExport(post.author)),
                    escapeCSVField(formatDateForExport(post.photo_date)),
                    escapeCSVField(formatDateForExport(post.created_at)),
                    escapeCSVField(cleanDataForExport(post.tags)),
                    escapeCSVField(post.image_url),
                    escapeCSVField(post.color)
                ];
                csvRows.push(row.join(';'));
            });
            
            const csvContent = csvRows.join('\r\n'); // Windows line endings
            
            // Criar arquivo com BOM para UTF-8 (compatibilidade Excel)
            const BOM = '\ufeff';
            const blob = new Blob([BOM + csvContent], { type: 'text/csv;charset=utf-8;' });
            
            // Download
            downloadFile(blob, `mural_postagens_${getTodayString()}.csv`);
            
            console.log(`‚úÖ CSV exportado: ${posts.length} postagens`);
            
        } catch (error) {
            console.error('Erro na exporta√ß√£o CSV:', error);
            alert('Erro ao exportar CSV. Tente novamente.');
        }
    }

    // Excel nativo com formata√ß√£o rica
    async function exportToExcel() {
        try {
            // Verificar se SheetJS est√° dispon√≠vel
            if (typeof XLSX === 'undefined') {
                // Carregar SheetJS dinamicamente
                await loadSheetJS();
            }
            
            // Buscar todas as postagens
            const response = await fetch(`${API_URL}/api/posts?limit=1000`);
            if (!response.ok) {
                throw new Error('Erro ao buscar postagens para exporta√ß√£o');
            }
            
            const data = await response.json();
            const posts = data.posts;
            
            if (posts.length === 0) {
                alert('N√£o h√° postagens para exportar.');
                return;
            }
            
            // Preparar dados para Excel
            const excelData = posts.map(post => ({
                'ID': post.id,
                'T√≠tulo': cleanDataForExport(post.title),
                'Descri√ß√£o': cleanDataForExport(post.description),
                'Autor': cleanDataForExport(post.author),
                'Data da Foto': post.photo_date ? new Date(post.photo_date) : '',
                'Data da Postagem': post.created_at ? new Date(post.created_at) : '',
                'Tags': cleanDataForExport(post.tags),
                'URL da Imagem': post.image_url,
                'Cor': post.color
            }));
            
            // Criar workbook
            const wb = XLSX.utils.book_new();
            const ws = XLSX.utils.json_to_sheet(excelData);
            
            // Configurar larguras das colunas
            ws['!cols'] = [
                { width: 10 },  // ID
                { width: 25 },  // T√≠tulo
                { width: 40 },  // Descri√ß√£o
                { width: 20 },  // Autor
                { width: 15 },  // Data da Foto
                { width: 18 },  // Data da Postagem
                { width: 25 },  // Tags
                { width: 50 },  // URL da Imagem
                { width: 15 }   // Cor
            ];
            
            // Configurar filtro autom√°tico
            ws['!autofilter'] = { ref: `A1:I${posts.length + 1}` };
            
            // Congelar primeira linha (cabe√ßalhos)
            ws['!freeze'] = { xSplit: 0, ySplit: 1 };
            
            // Adicionar worksheet ao workbook
            XLSX.utils.book_append_sheet(wb, ws, 'Postagens do Mural');
            
            // Gerar arquivo Excel
            const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });
            const blob = new Blob([excelBuffer], { 
                type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' 
            });
            
            // Download
            downloadFile(blob, `mural_postagens_${getTodayString()}.xlsx`);
            
            console.log(`‚úÖ Excel exportado: ${posts.length} postagens`);
            
        } catch (error) {
            console.error('Erro na exporta√ß√£o Excel:', error);
            alert('Erro ao exportar Excel. Tente novamente.');
        }
    }

    // Fun√ß√£o auxiliar para carregar SheetJS dinamicamente
    function loadSheetJS() {
        return new Promise((resolve, reject) => {
            const script = document.createElement('script');
            script.src = 'https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js';
            script.onload = resolve;
            script.onerror = reject;
            document.head.appendChild(script);
        });
    }

    // Fun√ß√£o auxiliar para download de arquivos
    function downloadFile(blob, filename) {
        const link = document.createElement('a');
        const url = URL.createObjectURL(blob);
        
        link.setAttribute('href', url);
        link.setAttribute('download', filename);
        link.style.visibility = 'hidden';
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        
        // Liberar mem√≥ria
        setTimeout(() => URL.revokeObjectURL(url), 1000);
    }

    // Fun√ß√£o auxiliar para obter data atual formatada
    function getTodayString() {
        const today = new Date();
        return today.toISOString().split('T')[0];
    }

    // Event listeners para exporta√ß√£o
    if (exportCsvBtn) {
        exportCsvBtn.addEventListener('click', exportToCSV);
    }
    
    if (exportExcelBtn) {
        exportExcelBtn.addEventListener('click', exportToExcel);
    }
    // ===============================================

    // Fun√ß√£o de login (inalterada)
    loginBtn.addEventListener('click', async () => {
        const password = passwordInput.value;
        const decodedPassword = getAdminPassword();

        try {
            const response = await fetch(`${API_URL}/api/posts?admin_password=${decodedPassword}`);
            if (response.ok) {
                console.log('Login bem-sucedido!');
                loginModal.style.display = 'none';
                adminPage.style.display = 'block';
                fetchPosts();
            } else {
                alert('Senha incorreta!');
            }
        } catch (error) {
            console.error('Erro ao verificar senha:', error);
            alert('Erro ao tentar fazer login. Tente novamente.');
        }
    });

    // Fun√ß√£o de logout
    logoutBtn.addEventListener('click', () => {
        location.reload();
    });

    // Fun√ß√µes de manipula√ß√£o do modal de edi√ß√£o
    closeEditModalBtn.addEventListener('click', () => {
        editPostModal.style.display = 'none';
    });

    window.addEventListener('click', (event) => {
        if (event.target === editPostModal) {
            editPostModal.style.display = 'none';
        }
    });

    function openEditModal(post) {
        document.getElementById('edit-post-id').value = post.id;
        document.getElementById('edit-title').value = post.title;
        document.getElementById('edit-image-url').value = post.image_url;
        document.getElementById('edit-description').value = post.description;
        document.getElementById('edit-author').value = post.author;
        document.getElementById('edit-tags').value = post.tags;
        document.getElementById('edit-created-at').value = new Date(post.created_at).toLocaleString();
        document.getElementById('edit-photo-date').value = post.photo_date.split('T')[0];
        editPostModal.style.display = 'block';
    }

    // NOVA FUN√á√ÉO DE EDI√á√ÉO COM CONFIRMA√á√ÉO DE SENHA
    async function submitEditForm(event) {
        event.preventDefault();
        
        try {
            // Solicitar confirma√ß√£o de senha
            const adminPassword = await showPasswordConfirm();
            
            const postId = document.getElementById('edit-post-id').value;
            const title = document.getElementById('edit-title').value;
            const imageUrl = document.getElementById('edit-image-url').value;
            const description = document.getElementById('edit-description').value;
            const author = document.getElementById('edit-author').value;
            const tags = document.getElementById('edit-tags').value;
            const photoDate = document.getElementById('edit-photo-date').value;

            const postData = {
                title,
                image_url: imageUrl,
                description,
                author,
                photo_date: photoDate,
                tags,
                color: ''
            };

            const response = await fetch(`${API_URL}/api/posts?id=${postId}&admin_password=${encodeURIComponent(adminPassword)}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(postData)
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.message || 'Erro ao atualizar a postagem.');
            }

            alert('Postagem atualizada com sucesso!');
            editPostModal.style.display = 'none';
            fetchPosts();
            
        } catch (error) {
            if (error.message !== 'Opera√ß√£o cancelada pelo usu√°rio') {
                console.error('Erro ao atualizar postagem:', error);
                alert(error.message);
            }
        }
    }

    if (editPostForm) {
        editPostForm.addEventListener('submit', submitEditForm);
    }

    // NOVA FUN√á√ÉO DE EXCLUS√ÉO COM CONFIRMA√á√ÉO DE SENHA
    async function deletePost(postId) {
        if (!confirm(`Tem certeza que deseja excluir a postagem ${postId}?`)) {
            return;
        }

        try {
            // Solicitar confirma√ß√£o de senha
            const adminPassword = await showPasswordConfirm();

            const response = await fetch(`${API_URL}/api/posts?id=${postId}&admin_password=${encodeURIComponent(adminPassword)}`, {
                method: 'DELETE'
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.message || 'Erro ao excluir a postagem.');
            }

            alert('Postagem exclu√≠da com sucesso!');
            fetchPosts();
            
        } catch (error) {
            if (error.message !== 'Opera√ß√£o cancelada pelo usu√°rio') {
                console.error('Erro ao excluir postagem:', error);
                alert(error.message);
            }
        }
    }

    // Fun√ß√£o para formatar data no formato brasileiro
    function formatDateToBR(dateString) {
        if (!dateString) return 'N/A';
        const date = new Date(dateString);
        return date.toLocaleDateString('pt-BR');
    }

    // Fun√ß√£o para truncar URL longa
    function truncateUrl(url, maxLength = 30) {
        if (!url) return 'N/A';
        if (url.length <= maxLength) return url;
        return url.substring(0, maxLength) + '...';
    }

    // Carregar postagens e popular a tabela (ATUALIZADA)
    async function fetchPosts() {
        try {
            const response = await fetch(`${API_URL}/api/posts?limit=${postsPerPage}&page=${currentPage}`);
            if (!response.ok) {
                throw new Error('Erro ao buscar postagens da API');
            }
            const data = await response.json();
            const posts = data.posts;
            allPosts = posts; // Armazenar para refer√™ncia
            
            postsTableBody.innerHTML = '';
            
            posts.forEach(post => {
                const row = postsTableBody.insertRow();
                row.innerHTML = `
                    <td class="checkbox-column">
                        <input type="checkbox" class="post-checkbox" value="${post.id}">
                    </td>
                    <td class="author-column">${post.author || 'N/A'}</td>
                    <td class="image-column">
                        <a href="${post.image_url}" target="_blank" class="image-link" title="${post.image_url}">
                            ${truncateUrl(post.image_url)}
                        </a>
                    </td>
                    <td class="date-column">${formatDateToBR(post.created_at)}</td>
                    <td class="date-column">${formatDateToBR(post.photo_date)}</td>
                    <td class="admin-buttons">
                        <button class="edit-btn" data-id="${post.id}">Editar</button>
                        <button class="delete-btn" data-id="${post.id}">Excluir</button>
                    </td>
                `;
                
                // Adicionar event listeners
                const checkbox = row.querySelector('.post-checkbox');
                checkbox.addEventListener('change', handleIndividualCheckbox);
                
                row.querySelector('.edit-btn').addEventListener('click', () => openEditModal(post));
                row.querySelector('.delete-btn').addEventListener('click', () => deletePost(post.id));
            });
            
            // Resetar estados de sele√ß√£o
            selectAllCheckbox.checked = false;
            selectAllCheckbox.indeterminate = false;
            updateBulkDeleteButton();
            
        } catch (error) {
            console.error('Erro ao buscar postagens:', error);
            alert('Erro ao buscar postagens. Verifique sua conex√£o ou a API.');
        }
    }
});
